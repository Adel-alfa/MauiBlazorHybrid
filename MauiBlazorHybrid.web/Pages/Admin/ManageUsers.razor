@page "/manage-students"
@inject IAppState AppState
@inject IAdminApi userApi
<div class="row">
    <div class="col-sm-4 ms-auto mb-3">
        <label class="form-label">  Filtrer par Statut approuvé </label>
        <select class="form-control" @bind="filter" @bind:after="OnFilterChangeAsync">
            @foreach (var f in Enum.GetValues<UserApprovedFilter>())
            {
                <option value="@f">@f</option>
            }
        </select>
    </div>   
</div>
<div class="row">
    <SectionContent SectionName="pageTitle">Gérer les Étudiants</SectionContent>
    <QuickGrid ItemsProvider="userProvider" @ref="_grid" Pagination="pagination" Class="table table-striped table-hover">
        <PropertyColumn Property="u=> u.Id" />
        <PropertyColumn Property="u=> u.Name" Title="Nom" />
        <PropertyColumn Property="u=> u.Email" Title="Mail de l'utilisateur" />
        <PropertyColumn Property="u=> u.Phone" />

        <TemplateColumn Title="Est Approuvé">
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" checked="@(context.IsApproved)" role="switch" id="Q_@context.Id" @onchange="()=>OnUserApprovedAsync(context)" />
                <label class="form-check-label" for="Q_@context.Id">
                    @(context.IsApproved ? "Oui" : "No")
                </label>
            </div>
        </TemplateColumn>
    </QuickGrid>
    <Paginator State="pagination" />
</div>

@code {
    private GridItemsProvider<UserDto> userProvider;
    private QuickGrid<UserDto>? _grid;
    private const int PageSize = 4;
    private UserApprovedFilter filter = UserApprovedFilter.Tous;
    private PaginationState pagination = new() { ItemsPerPage = PageSize };
    protected override async Task OnInitializedAsync()
    {
        AppState.ShowLoader("Récupérer des étudiants");

        userProvider = async request =>
        {
            var pageResult = await userApi.GetUsersAsync(filter, request.StartIndex, request.Count ?? PageSize);
            AppState.HideLoader();
            return GridItemsProviderResult.From(pageResult.Record, pageResult.TotalCount);
        };
    }
    private async Task OnUserApprovedAsync(UserDto user)
    {
        AppState.ShowLoader("Mise à jour du statut");
        user.IsApproved = !user.IsApproved;
        ShouldRerender = false;
        await userApi.ToggleUserApprovedStatus(user.Id);        
        ShouldRerender = true;
        AppState.HideLoader();
    }
    private async Task OnFilterChangeAsync()
    {
        if (_grid != null)
            await _grid.RefreshDataAsync();
    }
    private bool ShouldRerender = true;
    protected override bool ShouldRender() => ShouldRerender;

}
